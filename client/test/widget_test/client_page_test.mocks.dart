// Mocks generated by Mockito 5.4.4 from annotations
// in client/test/widget_test/client_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:client/domain/usecase/send_message_usecase.dart' as _i6;
import 'package:client/domain/usecase/web_socket_connect_state.dart' as _i2;
import 'package:client/domain/usecase/web_socket_connect_usecase.dart' as _i3;
import 'package:client/domain/usecase/web_socket_disconnect_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketConnectState_0 extends _i1.SmartFake
    implements _i2.WebSocketConnectState {
  _FakeWebSocketConnectState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WebSocketConnectUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketConnectUsecase extends _i1.Mock
    implements _i3.WebSocketConnectUsecase {
  @override
  _i4.Future<_i2.WebSocketConnectState> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i4.Future<_i2.WebSocketConnectState>.value(
            _FakeWebSocketConnectState_0(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.WebSocketConnectState>.value(
            _FakeWebSocketConnectState_0(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WebSocketConnectState>);
}

/// A class which mocks [WebSocketDisconnectUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketDisconnectUsecase extends _i1.Mock
    implements _i5.WebSocketDisconnectUsecase {
  @override
  _i4.Future<_i2.WebSocketConnectState> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i4.Future<_i2.WebSocketConnectState>.value(
            _FakeWebSocketConnectState_0(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.WebSocketConnectState>.value(
            _FakeWebSocketConnectState_0(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WebSocketConnectState>);
}

/// A class which mocks [SendMessageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUsecase extends _i1.Mock
    implements _i6.SendMessageUsecase {
  @override
  _i4.Future<_i2.WebSocketConnectState> execute({
    required String? message,
    required String? userName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #message: message,
            #userName: userName,
          },
        ),
        returnValue: _i4.Future<_i2.WebSocketConnectState>.value(
            _FakeWebSocketConnectState_0(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #message: message,
              #userName: userName,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.WebSocketConnectState>.value(
            _FakeWebSocketConnectState_0(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #message: message,
              #userName: userName,
            },
          ),
        )),
      ) as _i4.Future<_i2.WebSocketConnectState>);
}
